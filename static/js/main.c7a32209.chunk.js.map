{"version":3,"sources":["components/Pagination/Pagination.js","App.js","index.js"],"names":["Pagination","setItems","perPage","totalItems","currentPage","props","useState","allListItems","setAllListItems","useEffect","Math","ceil","className","onClick","paginate","start","end","pagination","floor","from","to","step","i","range","push","setPagination","map","item","key","style","background","color","width","showCurrentAndLastPages","App","data","error","loading","jsonPlaceholderData","setJsonPlaceholderData","pagesData","setPagesData","fetch","then","response","a","ok","json","Array","isArray","length","name","onChange","e","persist","target","value","setPerPage","dataItems","lastIdx","firstIdx","slice","getDataTable","fontWeight","id","title","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c7a32209.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport './Pagination.scss'\r\n\r\nexport const Pagination = ({setItems, perPage, totalItems, currentPage, ...props}) => {\r\n\r\n    /*        \r\n        setItems - number of items in pagination\r\n        perPage - limit on the number of lines displayed on the screen in the table\r\n        currentPage - current page\r\n        totalItems - data array length\r\n\r\n        props.paginate - method for setting the current page in the parent component\r\n    */\r\n\r\n    const [allListItems, setAllListItems] = useState(0)\r\n\r\n    useEffect(() => {\r\n        setAllListItems(Math.ceil(totalItems / perPage))\r\n    }, [])\r\n\r\n    useEffect(() => {        \r\n        setAllListItems(Math.ceil(totalItems / perPage) )\r\n    }, [perPage])\r\n\r\n    const range = (from, to, step = 1) => {\r\n        let i = from;\r\n        const range = [];\r\n        \r\n        while (i <= to) {\r\n            range.push(i);\r\n            i += step;\r\n        }\r\n        \r\n        return range;\r\n    }\r\n\r\n    const even = num => !(num % 2);\r\n\r\n    const setPagination = () => {\r\n        let start = currentPage\r\n        let end = allListItems\r\n        let pagination = []\r\n        \r\n        if (currentPage < 1 || !setItems) {\r\n            return pagination;\r\n        }\r\n\r\n        if (currentPage - Math.floor(setItems / 2) < 0){\r\n            start = 1\r\n        }\r\n        else if (currentPage - Math.floor(setItems / 2) >= 0 && currentPage + Math.floor(setItems / 2) < allListItems) { \r\n            start = currentPage - Math.floor(setItems / 2) > 0 \r\n                ? currentPage - Math.floor(setItems / 2) \r\n                : 1\r\n        }\r\n        else if ((currentPage - setItems >= 0 && currentPage + Math.floor(setItems / 2) >= allListItems) \r\n            || currentPage + Math.floor(setItems / 2) >= allListItems) {\r\n            start = allListItems - (setItems - 1)\r\n        }\r\n\r\n        if (currentPage + Math.floor(setItems / 2) >= allListItems) {\r\n            end = allListItems\r\n        }\r\n        else if (currentPage < Math.floor(setItems / 2)) {\r\n            end = setItems\r\n        }\r\n        else if (currentPage >= Math.floor(setItems / 2) && currentPage + Math.floor(setItems / 2) <= allListItems) {\r\n            end = currentPage === Math.floor(setItems / 2) \r\n                ? currentPage + Math.ceil(setItems / 2) \r\n                : even(setItems) ? currentPage + (Math.floor(setItems / 2) - 1) : currentPage + Math.floor(setItems / 2)\r\n        }\r\n        else if (currentPage >= setItems && currentPage + Math.floor(setItems / 2) > allListItems) {\r\n            end = allListItems\r\n        }\r\n        \r\n        if (setItems > allListItems){\r\n            start = 1\r\n            end = allListItems\r\n        }\r\n\r\n        pagination = range(start, end);\r\n\r\n        return pagination\r\n    }\r\n\r\n    return (\r\n        <div className=\"pagination-container\">\r\n            <span \r\n                className=\"pagination-item__arrow\" \r\n                onClick={()=> props.paginate(1)}\r\n                >&#171;\r\n            </span>\r\n\r\n            {setPagination().map((item, i) => {\r\n                return <span\r\n                    key={`pagination${i}`}\r\n                    style={item === currentPage\r\n                        ? item < 100 \r\n                            ? {background: '#1E3C96', color: '#fff', } \r\n                            : {background: '#1E3C96', color: '#fff', width: '30px'}\r\n                        : item >= 100 \r\n                            ? {width: '30px'} \r\n                            : {}            \r\n                        }\r\n                    className=\"pagination-item__numbers\"\r\n                    onClick={()=> props.paginate(item)}\r\n                >{item} </span>              \r\n            })}   \r\n                     \r\n            <span \r\n                className=\"pagination-item__arrow\" \r\n                onClick={()=> props.paginate(allListItems)}\r\n            >&#187;</span>\r\n            \r\n            {props.showCurrentAndLastPages && \r\n                <span className=\"pagination-item__counter\">\r\n                    <span className=\"pagination-item__counter-title\">Pages: </span>\r\n                    {currentPage} / {allListItems}\r\n                </span>}\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect, Fragment } from 'react';\nimport { Pagination } from './components/Pagination/Pagination';\n\nfunction App() {\n\n  const [ jsonPlaceholderData, setJsonPlaceholderData ] = useState({\n    data: [],\n    error: false,\n    loading: true,\n  })\n\n  const [ pagesData, setPagesData] = useState({\n    currentPage: 1,\n    perPage: 5,\n    allListItems: 0,\n  })\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n    .then(async (response) => {\n      if (response.ok) {\n          let data = await response.json()\n          setJsonPlaceholderData({\n            ...jsonPlaceholderData,\n            data,\n            loading: false,\n          })\n          setPagination(data)         \n      } else {\n        setJsonPlaceholderData({\n          ...jsonPlaceholderData,\n          error: !response.ok,\n        })\n      }\n    })\n  }, [])\n\n\n  const setPagination = (data) => {\n    const { perPage } = pagesData\n\n    let allListItems = 0;\n\n    if(Array.isArray(data)){\n        allListItems = Math.ceil(data.length / perPage)                     \n    }\n        \n    setPagesData({\n      ...pagesData,\n      allListItems\n    })\n  }\n\n  const setPagePagination = (currentPage) => {\n    setPagesData({\n      ...pagesData,\n      currentPage\n    })    \n  }\n\n  const getDataTable = () => {\n    const { data } = jsonPlaceholderData\n    const { currentPage, perPage } = pagesData\n\n    let dataItems = []\n\n    if(Array.isArray(jsonPlaceholderData.data)){\n        const lastIdx = currentPage * perPage;\n        const firstIdx = lastIdx - perPage;\n        dataItems = data.slice(firstIdx, lastIdx);\n    }\n\n    return dataItems           \n  }\n\n  const setPerPage = (e) => {\n    e.persist()\n    let perPage = +e.target.value\n\n    if(perPage){\n      setPagesData({\n        ...pagesData,\n        perPage: +e.target.value,\n        currentPage: 1,\n      })\n    }\n  }\n\n  useEffect(() => {\n    setPagination(jsonPlaceholderData.data, pagesData.perPage)\n  }, [pagesData.perPage])\n\n\n  return (\n    !jsonPlaceholderData.error && pagesData.allListItems > 0 &&  \n    <Fragment>\n      <div className=\"perpage-container-showPerPage\">\n        <span className=\"perpage-container-showPerPage__title\">Items per page: </span>\n        <select className=\"perpage-container-showPerPage__select\" name=\"showPerPage\" onChange={(e) => {setPerPage(e)}}>\n          <option  className=\"perpage-container-showPerPage__option\" value=\"5\">5</option>\n          <option  className=\"perpage-container-showPerPage__option\" value=\"10\">10</option>\n          <option  className=\"perpage-container-showPerPage__option\" value=\"15\">15</option>\n          <option  className=\"perpage-container-showPerPage__option\" value=\"20\">20</option>\n        </select>\n      </div>\n\n      <div className=\"pagination-table-wrapper\"> \n          {getDataTable().map((item, i) => (\n            <Fragment key={`title${i}`}>\n              <div className=\"pagination-table-item\">\n                <span style={{fontWeight: 'bold'}}>{item.id + ' '}</span>\n                <span>{item.title}</span>\n              </div>\n            </Fragment>\n          ))}     \n      </div>\n\n      <div className=\"pagination-container-wrapper\">        \n        <Pagination\n            setItems={7}\n            paginate={setPagePagination} \n            perPage={pagesData.perPage} \n            totalItems={jsonPlaceholderData.data.length}\n            currentPage={pagesData.currentPage}\n            showCurrentAndLastPages={true}\n        />\n      </div>\n    </Fragment>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}